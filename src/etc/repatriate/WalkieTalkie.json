{
  "contractName": "WalkieTalkie",
  "abi": [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			}
		],
		"name": "allowance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "balance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "burn",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "burnFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "decimals",
		"outputs": [
			{
				"internalType": "uint8",
				"name": "",
				"type": "uint8"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "subtractedValue",
				"type": "uint256"
			}
		],
		"name": "decreaseAllowance",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "upcId",
				"type": "string"
			}
		],
		"name": "getWalkieTalkie",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "addedValue",
				"type": "uint256"
			}
		],
		"name": "increaseAllowance",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "rewards",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "winningHash",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "newAddress",
				"type": "address"
			}
		],
		"name": "setUPCNFT",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "upcId",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "url",
				"type": "string"
			}
		],
		"name": "setWalkieTalkie",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "recipient",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "transfer",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "recipient",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"name": "usedGuids",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"name": "walkieTalkie",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "workersForAddress",
		"outputs": [
			{
				"internalType": "address",
				"name": "supervisor",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "guid",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "upc",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "workersOnUpc",
		"outputs": [
			{
				"internalType": "address",
				"name": "supervisor",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "guid",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "upc",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
],
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"winningHash\",\"type\":\"string\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"winningHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. Note they can later distribute these tokens as they wish using `transfer` and other `ERC20` functions.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"constructor\":{\"details\":\"Constructor that gives _msgSender() all of existing tokens.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"title\":\"SimpleToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/home/tenten/Projects/upcgold.io/src/contracts/xUPC.sol\":\"xUPC\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/tenten/Projects/upcgold.io/src/contracts/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x999cea287aa385b94d95d5aefa2cd273a1f4b86cbd01929ebba66f4bf0851bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0569fb0b00b0e0ee69ad7e6d32c8ca90467b43ef7e23ee434badf09a35fad487\",\"dweb:/ipfs/Qmc1K7Q3SXDoNxZA2HuoS1m4r39hJDEzMQ8zMhN3aaLmR8\"]},\"/home/tenten/Projects/upcgold.io/src/contracts/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://087318b21c528119f649899f5b5580566dd8d7b0303d4904bd0e8580c3545f14\",\"dweb:/ipfs/Qmbn5Mj7aUn8hJuQ8VrQjjEXRsXyJKykgnjR9p4C3nfLtL\"]},\"/home/tenten/Projects/upcgold.io/src/contracts/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76b539a8edd558b010d1ff3e462c5d4edd039b790b91f31a5bce18957655cc9f\",\"dweb:/ipfs/QmSdJehhx1SwCWLSFFgHQTmUY2YwDTBQjTVjkmhXhA1srb\"]},\"/home/tenten/Projects/upcgold.io/src/contracts/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d4c3df1a7ca104b633a7d81c6c6f5192367d150cd5a32cba81f7f27012729013\",\"dweb:/ipfs/QmSim72e3ZVsfgZt8UceCvbiSuMRHR6WDsiamqNzZahGSY\"]},\"/home/tenten/Projects/upcgold.io/src/contracts/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26e8b38a7ac8e7b4463af00cf7fff1bf48ae9875765bf4f7751e100124d0bc8c\",\"dweb:/ipfs/QmWcsmkVr24xmmjfnBQZoemFniXjj3vwT78Cz6uqZW1Hux\"]},\"/home/tenten/Projects/upcgold.io/src/contracts/xUPC.sol\":{\"keccak256\":\"0xe85e71274c9be147491cd0c64c05e926d1957b6a59441fae7408b251333654c1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f64d6f688136619420d72c7b8c8a760ea4501edbe11fae0ee9add4c3a759c499\",\"dweb:/ipfs/QmPd39fsE77mrag27WbESQNnnZFZACPXzxkCpvw7e9kYJz\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c806379cc679011610095578063a457c2d711610064578063a457c2d714610328578063a9059cbb14610365578063dd62ed3e146103a2578063e22223d5146103df578063f301af42146103f6576100fe565b806379cc6790146102a15780637d6aeb9d146102ca57806395d89b41146102e657806399f4b25114610311576100fe565b8063313ce567116100d1578063313ce567146101d357806339509351146101fe57806342966c681461023b57806370a0823114610264576100fe565b806306fdde0314610103578063095ea7b31461012e57806318160ddd1461016b57806323b872dd14610196575b600080fd5b34801561010f57600080fd5b50610118610434565b6040516101259190611947565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190611659565b6104c6565b604051610162919061192c565b60405180910390f35b34801561017757600080fd5b506101806104e4565b60405161018d9190611ae9565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b89190611606565b6104ee565b6040516101ca919061192c565b60405180910390f35b3480156101df57600080fd5b506101e86105e6565b6040516101f59190611b34565b60405180910390f35b34801561020a57600080fd5b5061022560048036038101906102209190611659565b6105ef565b604051610232919061192c565b60405180910390f35b34801561024757600080fd5b50610262600480360381019061025d9190611699565b61069b565b005b34801561027057600080fd5b5061028b60048036038101906102869190611599565b6106af565b6040516102989190611ae9565b60405180910390f35b3480156102ad57600080fd5b506102c860048036038101906102c39190611659565b6106f7565b005b6102e460048036038101906102df91906116c6565b610772565b005b3480156102f257600080fd5b506102fb610877565b6040516103089190611947565b60405180910390f35b34801561031d57600080fd5b50610326610909565b005b34801561033457600080fd5b5061034f600480360381019061034a9190611659565b61092e565b60405161035c919061192c565b60405180910390f35b34801561037157600080fd5b5061038c60048036038101906103879190611659565b610a19565b604051610399919061192c565b60405180910390f35b3480156103ae57600080fd5b506103c960048036038101906103c491906115c6565b610a37565b6040516103d69190611ae9565b60405180910390f35b3480156103eb57600080fd5b506103f4610abe565b005b34801561040257600080fd5b5061041d60048036038101906104189190611699565b610b5e565b60405161042b929190611b04565b60405180910390f35b60606003805461044390611ce2565b80601f016020809104026020016040519081016040528092919081815260200182805461046f90611ce2565b80156104bc5780601f10610491576101008083540402835291602001916104bc565b820191906000526020600020905b81548152906001019060200180831161049f57829003601f168201915b5050505050905090565b60006104da6104d3610c1a565b8484610c22565b6001905092915050565b6000600254905090565b60006104fb848484610ded565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610546610c1a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd906119e9565b60405180910390fd5b6105da856105d2610c1a565b858403610c22565b60019150509392505050565b60006012905090565b60006106916105fc610c1a565b84846001600061060a610c1a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461068c9190611bc1565b610c22565b6001905092915050565b6106ac6106a6610c1a565b8261106e565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061070a83610705610c1a565b610a37565b90508181101561074f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074690611a09565b60405180910390fd5b6107638361075b610c1a565b848403610c22565b61076d838361106e565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f990611ac9565b60405180910390fd5b61080a6113af565b82816000018181525050818160200181905250600781908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908051906020019061086f9291906113c9565b505050505050565b60606004805461088690611ce2565b80601f01602080910402602001604051908101604052809291908181526020018280546108b290611ce2565b80156108ff5780601f106108d4576101008083540402835291602001916108ff565b820191906000526020600020905b8154815290600101906020018083116108e257829003601f168201915b5050505050905090565b61091a33662386f26fc10000611245565b61092c30670de0b6b3a7640000611245565b565b6000806001600061093d610c1a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156109fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f190611a89565b60405180910390fd5b610a0e610a05610c1a565b85858403610c22565b600191505092915050565b6000610a2d610a26610c1a565b8484610ded565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4590611ac9565b60405180910390fd5b60076000610b5c919061144f565b565b60078181548110610b6e57600080fd5b9060005260206000209060020201600091509050806000015490806001018054610b9790611ce2565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc390611ce2565b8015610c105780601f10610be557610100808354040283529160200191610c10565b820191906000526020600020905b815481529060010190602001808311610bf357829003601f168201915b5050505050905082565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8990611a69565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf9906119a9565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610de09190611ae9565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5490611a49565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ecd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec490611969565b60405180910390fd5b610ed88383836113a5565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610f5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f55906119c9565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ff19190611bc1565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516110559190611ae9565b60405180910390a36110688484846113aa565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d590611a29565b60405180910390fd5b6110ea826000836113a5565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116790611989565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282546111c79190611c17565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161122c9190611ae9565b60405180910390a3611240836000846113aa565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ac90611aa9565b60405180910390fd5b6112c1600083836113a5565b80600260008282546112d39190611bc1565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113289190611bc1565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161138d9190611ae9565b60405180910390a36113a1600083836113aa565b5050565b505050565b505050565b604051806040016040528060008152602001606081525090565b8280546113d590611ce2565b90600052602060002090601f0160209004810192826113f7576000855561143e565b82601f1061141057805160ff191683800117855561143e565b8280016001018555821561143e579182015b8281111561143d578251825591602001919060010190611422565b5b50905061144b9190611473565b5090565b50805460008255600202906000526020600020908101906114709190611490565b50565b5b8082111561148c576000816000905550600101611474565b5090565b5b808211156114bb576000808201600090556001820160006114b291906114bf565b50600201611491565b5090565b5080546114cb90611ce2565b6000825580601f106114dd57506114fc565b601f0160209004906000526020600020908101906114fb9190611473565b5b50565b600061151261150d84611b74565b611b4f565b90508281526020810184848401111561152e5761152d611dd7565b5b611539848285611ca0565b509392505050565b6000813590506115508161215f565b92915050565b600082601f83011261156b5761156a611dd2565b5b813561157b8482602086016114ff565b91505092915050565b60008135905061159381612176565b92915050565b6000602082840312156115af576115ae611de1565b5b60006115bd84828501611541565b91505092915050565b600080604083850312156115dd576115dc611de1565b5b60006115eb85828601611541565b92505060206115fc85828601611541565b9150509250929050565b60008060006060848603121561161f5761161e611de1565b5b600061162d86828701611541565b935050602061163e86828701611541565b925050604061164f86828701611584565b9150509250925092565b600080604083850312156116705761166f611de1565b5b600061167e85828601611541565b925050602061168f85828601611584565b9150509250929050565b6000602082840312156116af576116ae611de1565b5b60006116bd84828501611584565b91505092915050565b600080604083850312156116dd576116dc611de1565b5b60006116eb85828601611584565b925050602083013567ffffffffffffffff81111561170c5761170b611ddc565b5b61171885828601611556565b9150509250929050565b61172b81611c5d565b82525050565b600061173c82611ba5565b6117468185611bb0565b9350611756818560208601611caf565b61175f81611de6565b840191505092915050565b6000611777602383611bb0565b915061178282611df7565b604082019050919050565b600061179a602283611bb0565b91506117a582611e46565b604082019050919050565b60006117bd602283611bb0565b91506117c882611e95565b604082019050919050565b60006117e0602683611bb0565b91506117eb82611ee4565b604082019050919050565b6000611803602883611bb0565b915061180e82611f33565b604082019050919050565b6000611826602483611bb0565b915061183182611f82565b604082019050919050565b6000611849602183611bb0565b915061185482611fd1565b604082019050919050565b600061186c602583611bb0565b915061187782612020565b604082019050919050565b600061188f602483611bb0565b915061189a8261206f565b604082019050919050565b60006118b2602583611bb0565b91506118bd826120be565b604082019050919050565b60006118d5601f83611bb0565b91506118e08261210d565b602082019050919050565b60006118f8601683611bb0565b915061190382612136565b602082019050919050565b61191781611c89565b82525050565b61192681611c93565b82525050565b60006020820190506119416000830184611722565b92915050565b600060208201905081810360008301526119618184611731565b905092915050565b600060208201905081810360008301526119828161176a565b9050919050565b600060208201905081810360008301526119a28161178d565b9050919050565b600060208201905081810360008301526119c2816117b0565b9050919050565b600060208201905081810360008301526119e2816117d3565b9050919050565b60006020820190508181036000830152611a02816117f6565b9050919050565b60006020820190508181036000830152611a2281611819565b9050919050565b60006020820190508181036000830152611a428161183c565b9050919050565b60006020820190508181036000830152611a628161185f565b9050919050565b60006020820190508181036000830152611a8281611882565b9050919050565b60006020820190508181036000830152611aa2816118a5565b9050919050565b60006020820190508181036000830152611ac2816118c8565b9050919050565b60006020820190508181036000830152611ae2816118eb565b9050919050565b6000602082019050611afe600083018461190e565b92915050565b6000604082019050611b19600083018561190e565b8181036020830152611b2b8184611731565b90509392505050565b6000602082019050611b49600083018461191d565b92915050565b6000611b59611b6a565b9050611b658282611d14565b919050565b6000604051905090565b600067ffffffffffffffff821115611b8f57611b8e611da3565b5b611b9882611de6565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000611bcc82611c89565b9150611bd783611c89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611c0c57611c0b611d45565b5b828201905092915050565b6000611c2282611c89565b9150611c2d83611c89565b925082821015611c4057611c3f611d45565b5b828203905092915050565b6000611c5682611c69565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611ccd578082015181840152602081019050611cb2565b83811115611cdc576000848401525b50505050565b60006002820490506001821680611cfa57607f821691505b60208210811415611d0e57611d0d611d74565b5b50919050565b611d1d82611de6565b810181811067ffffffffffffffff82111715611d3c57611d3b611da3565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7760008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b7f53656e646572206e6f7420617574686f72697a65642e00000000000000000000600082015250565b61216881611c4b565b811461217357600080fd5b50565b61217f81611c89565b811461218a57600080fd5b5056fea26469706673582212206f4fab2acd4c454df5908864d93e1f7962b3596bd409e479200c20abfcc6741764736f6c63430008070033",
  "immutableReferences": {},
  "sourceMap": "534:1235:190:-:0;;;603:1;589:15;;839:150;;;;;;;;;;1896:113:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1970:5;1962;:13;;;;;;;;;;;;:::i;:::-;;1995:7;1985;:17;;;;;;;;;;;;:::i;:::-;;1896:113;;898:56:190::1;904:12;:10;;;:12;;:::i;:::-;941:10;:8;;;:10;;:::i;:::-;933:19;;927:2;:25;;;;:::i;:::-;918:5;:35;;;;:::i;:::-;898:5;;;:56;;:::i;:::-;972:10;964:5;;:18;;;;;;;;;;;;;;;;;;534:1235:::0;;587:96:162;640:7;666:10;659:17;;587:96;:::o;3011:91:127:-;3069:5;3093:2;3086:9;;3011:91;:::o;8244:389::-;8346:1;8327:21;;:7;:21;;;;8319:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;8395:49;8424:1;8428:7;8437:6;8395:20;;;:49;;:::i;:::-;8471:6;8455:12;;:22;;;;;;;:::i;:::-;;;;;;;;8509:6;8487:9;:18;8497:7;8487:18;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;8551:7;8530:37;;8547:1;8530:37;;;8560:6;8530:37;;;;;;:::i;:::-;;;;;;;;8578:48;8606:1;8610:7;8619:6;8578:19;;;:48;;:::i;:::-;8244:389;;:::o;10906:121::-;;;;:::o;11615:120::-;;;;:::o;534:1235:190:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:366:191:-;149:3;170:67;234:2;229:3;170:67;:::i;:::-;163:74;;246:93;335:3;246:93;:::i;:::-;364:2;359:3;355:12;348:19;;7:366;;;:::o;379:118::-;466:24;484:5;466:24;:::i;:::-;461:3;454:37;379:118;;:::o;503:419::-;669:4;707:2;696:9;692:18;684:26;;756:9;750:4;746:20;742:1;731:9;727:17;720:47;784:131;910:4;784:131;:::i;:::-;776:139;;503:419;;;:::o;928:222::-;1021:4;1059:2;1048:9;1044:18;1036:26;;1072:71;1140:1;1129:9;1125:17;1116:6;1072:71;:::i;:::-;928:222;;;;:::o;1156:169::-;1240:11;1274:6;1269:3;1262:19;1314:4;1309:3;1305:14;1290:29;;1156:169;;;;:::o;1331:305::-;1371:3;1390:20;1408:1;1390:20;:::i;:::-;1385:25;;1424:20;1442:1;1424:20;:::i;:::-;1419:25;;1578:1;1510:66;1506:74;1503:1;1500:81;1497:107;;;1584:18;;:::i;:::-;1497:107;1628:1;1625;1621:9;1614:16;;1331:305;;;;:::o;1642:848::-;1703:5;1710:4;1734:6;1725:15;;1758:5;1749:14;;1772:712;1793:1;1783:8;1780:15;1772:712;;;1888:4;1883:3;1879:14;1873:4;1870:24;1867:50;;;1897:18;;:::i;:::-;1867:50;1947:1;1937:8;1933:16;1930:451;;;2362:4;2355:5;2351:16;2342:25;;1930:451;2412:4;2406;2402:15;2394:23;;2442:32;2465:8;2442:32;:::i;:::-;2430:44;;1772:712;;;1642:848;;;;;;;:::o;2496:285::-;2556:5;2580:23;2598:4;2580:23;:::i;:::-;2572:31;;2624:27;2642:8;2624:27;:::i;:::-;2612:39;;2670:104;2707:66;2697:8;2691:4;2670:104;:::i;:::-;2661:113;;2496:285;;;;:::o;2787:1073::-;2841:5;3032:8;3022:40;;3053:1;3044:10;;3055:5;;3022:40;3081:4;3071:36;;3098:1;3089:10;;3100:5;;3071:36;3167:4;3215:1;3210:27;;;;3251:1;3246:191;;;;3160:277;;3210:27;3228:1;3219:10;;3230:5;;;3246:191;3291:3;3281:8;3278:17;3275:43;;;3298:18;;:::i;:::-;3275:43;3347:8;3344:1;3340:16;3331:25;;3382:3;3375:5;3372:14;3369:40;;;3389:18;;:::i;:::-;3369:40;3422:5;;;3160:277;;3546:2;3536:8;3533:16;3527:3;3521:4;3518:13;3514:36;3496:2;3486:8;3483:16;3478:2;3472:4;3469:12;3465:35;3449:111;3446:246;;;3602:8;3596:4;3592:19;3583:28;;3637:3;3630:5;3627:14;3624:40;;;3644:18;;:::i;:::-;3624:40;3677:5;;3446:246;3717:42;3755:3;3745:8;3739:4;3736:1;3717:42;:::i;:::-;3702:57;;;;3791:4;3786:3;3782:14;3775:5;3772:25;3769:51;;;3800:18;;:::i;:::-;3769:51;3849:4;3842:5;3838:16;3829:25;;2787:1073;;;;;;:::o;3866:348::-;3906:7;3929:20;3947:1;3929:20;:::i;:::-;3924:25;;3963:20;3981:1;3963:20;:::i;:::-;3958:25;;4151:1;4083:66;4079:74;4076:1;4073:81;4068:1;4061:9;4054:17;4050:105;4047:131;;;4158:18;;:::i;:::-;4047:131;4206:1;4203;4199:9;4188:20;;3866:348;;;;:::o;4220:77::-;4257:7;4286:5;4275:16;;4220:77;;;:::o;4303:320::-;4347:6;4384:1;4378:4;4374:12;4364:22;;4431:1;4425:4;4421:12;4452:18;4442:81;;4508:4;4500:6;4496:17;4486:27;;4442:81;4570:2;4562:6;4559:14;4539:18;4536:38;4533:84;;;4589:18;;:::i;:::-;4533:84;4354:269;4303:320;;;:::o;4629:180::-;4677:77;4674:1;4667:88;4774:4;4771:1;4764:15;4798:4;4795:1;4788:15;4815:180;4863:77;4860:1;4853:88;4960:4;4957:1;4950:15;4984:4;4981:1;4974:15;5001:102;5043:8;5090:5;5087:1;5083:13;5062:34;;5001:102;;;:::o;5109:181::-;5249:33;5245:1;5237:6;5233:14;5226:57;5109:181;:::o;534:1235:190:-;;;;;;;",
  "deployedSourceMap": "534:1235:190:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:98:127;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4171:166;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3162:106;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4804:478;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3011:91;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5677:212;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;487:89:129;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3326:125:127;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;882:361:129;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1281:252:190;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2285:102:127;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1626:136:190;;;;;;;;;;;;;:::i;:::-;;6376:405:127;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3654:172;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3884:149;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1543:72:190;;;;;;;;;;;;;:::i;:::-;;722:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;2074:98:127;2128:13;2160:5;2153:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:98;:::o;4171:166::-;4254:4;4270:39;4279:12;:10;:12::i;:::-;4293:7;4302:6;4270:8;:39::i;:::-;4326:4;4319:11;;4171:166;;;;:::o;3162:106::-;3223:7;3249:12;;3242:19;;3162:106;:::o;4804:478::-;4940:4;4956:36;4966:6;4974:9;4985:6;4956:9;:36::i;:::-;5003:24;5030:11;:19;5042:6;5030:19;;;;;;;;;;;;;;;:33;5050:12;:10;:12::i;:::-;5030:33;;;;;;;;;;;;;;;;5003:60;;5101:6;5081:16;:26;;5073:79;;;;;;;;;;;;:::i;:::-;;;;;;;;;5186:57;5195:6;5203:12;:10;:12::i;:::-;5236:6;5217:16;:25;5186:8;:57::i;:::-;5271:4;5264:11;;;4804:478;;;;;:::o;3011:91::-;3069:5;3093:2;3086:9;;3011:91;:::o;5677:212::-;5765:4;5781:80;5790:12;:10;:12::i;:::-;5804:7;5850:10;5813:11;:25;5825:12;:10;:12::i;:::-;5813:25;;;;;;;;;;;;;;;:34;5839:7;5813:34;;;;;;;;;;;;;;;;:47;;;;:::i;:::-;5781:8;:80::i;:::-;5878:4;5871:11;;5677:212;;;;:::o;487:89:129:-;542:27;548:12;:10;:12::i;:::-;562:6;542:5;:27::i;:::-;487:89;:::o;3326:125:127:-;3400:7;3426:9;:18;3436:7;3426:18;;;;;;;;;;;;;;;;3419:25;;3326:125;;;:::o;882:361:129:-;958:24;985:32;995:7;1004:12;:10;:12::i;:::-;985:9;:32::i;:::-;958:59;;1055:6;1035:16;:26;;1027:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;1136:58;1145:7;1154:12;:10;:12::i;:::-;1187:6;1168:16;:25;1136:8;:58::i;:::-;1214:22;1220:7;1229:6;1214:5;:22::i;:::-;948:295;882:361;;:::o;1281:252:190:-;1067:5;;;;;;;;;;;1053:19;;:10;:19;;;1032:88;;;;;;;;;;;;:::i;:::-;;;;;;;;;1378:26:::1;;:::i;:::-;1436:6;1414:12;:19;;:28;;;::::0;::::1;1479:11;1452:12;:24;;:38;;;;1500:7;1513:12;1500:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;1368:165;1281:252:::0;;:::o;2285:102:127:-;2341:13;2373:7;2366:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2285:102;:::o;1626:136:190:-;1668:33;1674:10;1686:14;1668:5;:33::i;:::-;1719:36;1733:4;1740:14;1719:5;:36::i;:::-;1626:136::o;6376:405:127:-;6469:4;6485:24;6512:11;:25;6524:12;:10;:12::i;:::-;6512:25;;;;;;;;;;;;;;;:34;6538:7;6512:34;;;;;;;;;;;;;;;;6485:61;;6584:15;6564:16;:35;;6556:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;6675:67;6684:12;:10;:12::i;:::-;6698:7;6726:15;6707:16;:34;6675:8;:67::i;:::-;6770:4;6763:11;;;6376:405;;;;:::o;3654:172::-;3740:4;3756:42;3766:12;:10;:12::i;:::-;3780:9;3791:6;3756:9;:42::i;:::-;3815:4;3808:11;;3654:172;;;;:::o;3884:149::-;3973:7;3999:11;:18;4011:5;3999:18;;;;;;;;;;;;;;;:27;4018:7;3999:27;;;;;;;;;;;;;;;;3992:34;;3884:149;;;;:::o;1543:72:190:-;1067:5;;;;;;;;;;;1053:19;;:10;:19;;;1032:88;;;;;;;;;;;;:::i;:::-;;;;;;;;;1601:7:::1;;1594:14;;;;:::i;:::-;1543:72::o:0;722:23::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;587:96:162:-;640:7;666:10;659:17;;587:96;:::o;9952:370:127:-;10100:1;10083:19;;:5;:19;;;;10075:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10180:1;10161:21;;:7;:21;;;;10153:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10262:6;10232:11;:18;10244:5;10232:18;;;;;;;;;;;;;;;:27;10251:7;10232:27;;;;;;;;;;;;;;;:36;;;;10299:7;10283:32;;10292:5;10283:32;;;10308:6;10283:32;;;;;;:::i;:::-;;;;;;;;9952:370;;;:::o;7255:713::-;7408:1;7390:20;;:6;:20;;;;7382:70;;;;;;;;;;;;:::i;:::-;;;;;;;;;7491:1;7470:23;;:9;:23;;;;7462:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;7544:47;7565:6;7573:9;7584:6;7544:20;:47::i;:::-;7602:21;7626:9;:17;7636:6;7626:17;;;;;;;;;;;;;;;;7602:41;;7678:6;7661:13;:23;;7653:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;7797:6;7781:13;:22;7761:9;:17;7771:6;7761:17;;;;;;;;;;;;;;;:42;;;;7847:6;7823:9;:20;7833:9;7823:20;;;;;;;;;;;;;;;;:30;;;;;;;:::i;:::-;;;;;;;;7886:9;7869:35;;7878:6;7869:35;;;7897:6;7869:35;;;;;;:::i;:::-;;;;;;;;7915:46;7935:6;7943:9;7954:6;7915:19;:46::i;:::-;7372:596;7255:713;;;:::o;8953:576::-;9055:1;9036:21;;:7;:21;;;;9028:67;;;;;;;;;;;;:::i;:::-;;;;;;;;;9106:49;9127:7;9144:1;9148:6;9106:20;:49::i;:::-;9166:22;9191:9;:18;9201:7;9191:18;;;;;;;;;;;;;;;;9166:43;;9245:6;9227:14;:24;;9219:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;9362:6;9345:14;:23;9324:9;:18;9334:7;9324:18;;;;;;;;;;;;;;;:44;;;;9404:6;9388:12;;:22;;;;;;;:::i;:::-;;;;;;;;9452:1;9426:37;;9435:7;9426:37;;;9456:6;9426:37;;;;;;:::i;:::-;;;;;;;;9474:48;9494:7;9511:1;9515:6;9474:19;:48::i;:::-;9018:511;8953:576;;:::o;8244:389::-;8346:1;8327:21;;:7;:21;;;;8319:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;8395:49;8424:1;8428:7;8437:6;8395:20;:49::i;:::-;8471:6;8455:12;;:22;;;;;;;:::i;:::-;;;;;;;;8509:6;8487:9;:18;8497:7;8487:18;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;8551:7;8530:37;;8547:1;8530:37;;;8560:6;8530:37;;;;;;:::i;:::-;;;;;;;;8578:48;8606:1;8610:7;8619:6;8578:19;:48::i;:::-;8244:389;;:::o;10906:121::-;;;;:::o;11615:120::-;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;7:412:191:-;85:5;110:66;126:49;168:6;126:49;:::i;:::-;110:66;:::i;:::-;101:75;;199:6;192:5;185:21;237:4;230:5;226:16;275:3;266:6;261:3;257:16;254:25;251:112;;;282:79;;:::i;:::-;251:112;372:41;406:6;401:3;396;372:41;:::i;:::-;91:328;7:412;;;;;:::o;425:139::-;471:5;509:6;496:20;487:29;;525:33;552:5;525:33;:::i;:::-;425:139;;;;:::o;584:340::-;640:5;689:3;682:4;674:6;670:17;666:27;656:122;;697:79;;:::i;:::-;656:122;814:6;801:20;839:79;914:3;906:6;899:4;891:6;887:17;839:79;:::i;:::-;830:88;;646:278;584:340;;;;:::o;930:139::-;976:5;1014:6;1001:20;992:29;;1030:33;1057:5;1030:33;:::i;:::-;930:139;;;;:::o;1075:329::-;1134:6;1183:2;1171:9;1162:7;1158:23;1154:32;1151:119;;;1189:79;;:::i;:::-;1151:119;1309:1;1334:53;1379:7;1370:6;1359:9;1355:22;1334:53;:::i;:::-;1324:63;;1280:117;1075:329;;;;:::o;1410:474::-;1478:6;1486;1535:2;1523:9;1514:7;1510:23;1506:32;1503:119;;;1541:79;;:::i;:::-;1503:119;1661:1;1686:53;1731:7;1722:6;1711:9;1707:22;1686:53;:::i;:::-;1676:63;;1632:117;1788:2;1814:53;1859:7;1850:6;1839:9;1835:22;1814:53;:::i;:::-;1804:63;;1759:118;1410:474;;;;;:::o;1890:619::-;1967:6;1975;1983;2032:2;2020:9;2011:7;2007:23;2003:32;2000:119;;;2038:79;;:::i;:::-;2000:119;2158:1;2183:53;2228:7;2219:6;2208:9;2204:22;2183:53;:::i;:::-;2173:63;;2129:117;2285:2;2311:53;2356:7;2347:6;2336:9;2332:22;2311:53;:::i;:::-;2301:63;;2256:118;2413:2;2439:53;2484:7;2475:6;2464:9;2460:22;2439:53;:::i;:::-;2429:63;;2384:118;1890:619;;;;;:::o;2515:474::-;2583:6;2591;2640:2;2628:9;2619:7;2615:23;2611:32;2608:119;;;2646:79;;:::i;:::-;2608:119;2766:1;2791:53;2836:7;2827:6;2816:9;2812:22;2791:53;:::i;:::-;2781:63;;2737:117;2893:2;2919:53;2964:7;2955:6;2944:9;2940:22;2919:53;:::i;:::-;2909:63;;2864:118;2515:474;;;;;:::o;2995:329::-;3054:6;3103:2;3091:9;3082:7;3078:23;3074:32;3071:119;;;3109:79;;:::i;:::-;3071:119;3229:1;3254:53;3299:7;3290:6;3279:9;3275:22;3254:53;:::i;:::-;3244:63;;3200:117;2995:329;;;;:::o;3330:654::-;3408:6;3416;3465:2;3453:9;3444:7;3440:23;3436:32;3433:119;;;3471:79;;:::i;:::-;3433:119;3591:1;3616:53;3661:7;3652:6;3641:9;3637:22;3616:53;:::i;:::-;3606:63;;3562:117;3746:2;3735:9;3731:18;3718:32;3777:18;3769:6;3766:30;3763:117;;;3799:79;;:::i;:::-;3763:117;3904:63;3959:7;3950:6;3939:9;3935:22;3904:63;:::i;:::-;3894:73;;3689:288;3330:654;;;;;:::o;3990:109::-;4071:21;4086:5;4071:21;:::i;:::-;4066:3;4059:34;3990:109;;:::o;4105:364::-;4193:3;4221:39;4254:5;4221:39;:::i;:::-;4276:71;4340:6;4335:3;4276:71;:::i;:::-;4269:78;;4356:52;4401:6;4396:3;4389:4;4382:5;4378:16;4356:52;:::i;:::-;4433:29;4455:6;4433:29;:::i;:::-;4428:3;4424:39;4417:46;;4197:272;4105:364;;;;:::o;4475:366::-;4617:3;4638:67;4702:2;4697:3;4638:67;:::i;:::-;4631:74;;4714:93;4803:3;4714:93;:::i;:::-;4832:2;4827:3;4823:12;4816:19;;4475:366;;;:::o;4847:::-;4989:3;5010:67;5074:2;5069:3;5010:67;:::i;:::-;5003:74;;5086:93;5175:3;5086:93;:::i;:::-;5204:2;5199:3;5195:12;5188:19;;4847:366;;;:::o;5219:::-;5361:3;5382:67;5446:2;5441:3;5382:67;:::i;:::-;5375:74;;5458:93;5547:3;5458:93;:::i;:::-;5576:2;5571:3;5567:12;5560:19;;5219:366;;;:::o;5591:::-;5733:3;5754:67;5818:2;5813:3;5754:67;:::i;:::-;5747:74;;5830:93;5919:3;5830:93;:::i;:::-;5948:2;5943:3;5939:12;5932:19;;5591:366;;;:::o;5963:::-;6105:3;6126:67;6190:2;6185:3;6126:67;:::i;:::-;6119:74;;6202:93;6291:3;6202:93;:::i;:::-;6320:2;6315:3;6311:12;6304:19;;5963:366;;;:::o;6335:::-;6477:3;6498:67;6562:2;6557:3;6498:67;:::i;:::-;6491:74;;6574:93;6663:3;6574:93;:::i;:::-;6692:2;6687:3;6683:12;6676:19;;6335:366;;;:::o;6707:::-;6849:3;6870:67;6934:2;6929:3;6870:67;:::i;:::-;6863:74;;6946:93;7035:3;6946:93;:::i;:::-;7064:2;7059:3;7055:12;7048:19;;6707:366;;;:::o;7079:::-;7221:3;7242:67;7306:2;7301:3;7242:67;:::i;:::-;7235:74;;7318:93;7407:3;7318:93;:::i;:::-;7436:2;7431:3;7427:12;7420:19;;7079:366;;;:::o;7451:::-;7593:3;7614:67;7678:2;7673:3;7614:67;:::i;:::-;7607:74;;7690:93;7779:3;7690:93;:::i;:::-;7808:2;7803:3;7799:12;7792:19;;7451:366;;;:::o;7823:::-;7965:3;7986:67;8050:2;8045:3;7986:67;:::i;:::-;7979:74;;8062:93;8151:3;8062:93;:::i;:::-;8180:2;8175:3;8171:12;8164:19;;7823:366;;;:::o;8195:::-;8337:3;8358:67;8422:2;8417:3;8358:67;:::i;:::-;8351:74;;8434:93;8523:3;8434:93;:::i;:::-;8552:2;8547:3;8543:12;8536:19;;8195:366;;;:::o;8567:::-;8709:3;8730:67;8794:2;8789:3;8730:67;:::i;:::-;8723:74;;8806:93;8895:3;8806:93;:::i;:::-;8924:2;8919:3;8915:12;8908:19;;8567:366;;;:::o;8939:118::-;9026:24;9044:5;9026:24;:::i;:::-;9021:3;9014:37;8939:118;;:::o;9063:112::-;9146:22;9162:5;9146:22;:::i;:::-;9141:3;9134:35;9063:112;;:::o;9181:210::-;9268:4;9306:2;9295:9;9291:18;9283:26;;9319:65;9381:1;9370:9;9366:17;9357:6;9319:65;:::i;:::-;9181:210;;;;:::o;9397:313::-;9510:4;9548:2;9537:9;9533:18;9525:26;;9597:9;9591:4;9587:20;9583:1;9572:9;9568:17;9561:47;9625:78;9698:4;9689:6;9625:78;:::i;:::-;9617:86;;9397:313;;;;:::o;9716:419::-;9882:4;9920:2;9909:9;9905:18;9897:26;;9969:9;9963:4;9959:20;9955:1;9944:9;9940:17;9933:47;9997:131;10123:4;9997:131;:::i;:::-;9989:139;;9716:419;;;:::o;10141:::-;10307:4;10345:2;10334:9;10330:18;10322:26;;10394:9;10388:4;10384:20;10380:1;10369:9;10365:17;10358:47;10422:131;10548:4;10422:131;:::i;:::-;10414:139;;10141:419;;;:::o;10566:::-;10732:4;10770:2;10759:9;10755:18;10747:26;;10819:9;10813:4;10809:20;10805:1;10794:9;10790:17;10783:47;10847:131;10973:4;10847:131;:::i;:::-;10839:139;;10566:419;;;:::o;10991:::-;11157:4;11195:2;11184:9;11180:18;11172:26;;11244:9;11238:4;11234:20;11230:1;11219:9;11215:17;11208:47;11272:131;11398:4;11272:131;:::i;:::-;11264:139;;10991:419;;;:::o;11416:::-;11582:4;11620:2;11609:9;11605:18;11597:26;;11669:9;11663:4;11659:20;11655:1;11644:9;11640:17;11633:47;11697:131;11823:4;11697:131;:::i;:::-;11689:139;;11416:419;;;:::o;11841:::-;12007:4;12045:2;12034:9;12030:18;12022:26;;12094:9;12088:4;12084:20;12080:1;12069:9;12065:17;12058:47;12122:131;12248:4;12122:131;:::i;:::-;12114:139;;11841:419;;;:::o;12266:::-;12432:4;12470:2;12459:9;12455:18;12447:26;;12519:9;12513:4;12509:20;12505:1;12494:9;12490:17;12483:47;12547:131;12673:4;12547:131;:::i;:::-;12539:139;;12266:419;;;:::o;12691:::-;12857:4;12895:2;12884:9;12880:18;12872:26;;12944:9;12938:4;12934:20;12930:1;12919:9;12915:17;12908:47;12972:131;13098:4;12972:131;:::i;:::-;12964:139;;12691:419;;;:::o;13116:::-;13282:4;13320:2;13309:9;13305:18;13297:26;;13369:9;13363:4;13359:20;13355:1;13344:9;13340:17;13333:47;13397:131;13523:4;13397:131;:::i;:::-;13389:139;;13116:419;;;:::o;13541:::-;13707:4;13745:2;13734:9;13730:18;13722:26;;13794:9;13788:4;13784:20;13780:1;13769:9;13765:17;13758:47;13822:131;13948:4;13822:131;:::i;:::-;13814:139;;13541:419;;;:::o;13966:::-;14132:4;14170:2;14159:9;14155:18;14147:26;;14219:9;14213:4;14209:20;14205:1;14194:9;14190:17;14183:47;14247:131;14373:4;14247:131;:::i;:::-;14239:139;;13966:419;;;:::o;14391:::-;14557:4;14595:2;14584:9;14580:18;14572:26;;14644:9;14638:4;14634:20;14630:1;14619:9;14615:17;14608:47;14672:131;14798:4;14672:131;:::i;:::-;14664:139;;14391:419;;;:::o;14816:222::-;14909:4;14947:2;14936:9;14932:18;14924:26;;14960:71;15028:1;15017:9;15013:17;15004:6;14960:71;:::i;:::-;14816:222;;;;:::o;15044:423::-;15185:4;15223:2;15212:9;15208:18;15200:26;;15236:71;15304:1;15293:9;15289:17;15280:6;15236:71;:::i;:::-;15354:9;15348:4;15344:20;15339:2;15328:9;15324:18;15317:48;15382:78;15455:4;15446:6;15382:78;:::i;:::-;15374:86;;15044:423;;;;;:::o;15473:214::-;15562:4;15600:2;15589:9;15585:18;15577:26;;15613:67;15677:1;15666:9;15662:17;15653:6;15613:67;:::i;:::-;15473:214;;;;:::o;15693:129::-;15727:6;15754:20;;:::i;:::-;15744:30;;15783:33;15811:4;15803:6;15783:33;:::i;:::-;15693:129;;;:::o;15828:75::-;15861:6;15894:2;15888:9;15878:19;;15828:75;:::o;15909:308::-;15971:4;16061:18;16053:6;16050:30;16047:56;;;16083:18;;:::i;:::-;16047:56;16121:29;16143:6;16121:29;:::i;:::-;16113:37;;16205:4;16199;16195:15;16187:23;;15909:308;;;:::o;16223:99::-;16275:6;16309:5;16303:12;16293:22;;16223:99;;;:::o;16328:169::-;16412:11;16446:6;16441:3;16434:19;16486:4;16481:3;16477:14;16462:29;;16328:169;;;;:::o;16503:305::-;16543:3;16562:20;16580:1;16562:20;:::i;:::-;16557:25;;16596:20;16614:1;16596:20;:::i;:::-;16591:25;;16750:1;16682:66;16678:74;16675:1;16672:81;16669:107;;;16756:18;;:::i;:::-;16669:107;16800:1;16797;16793:9;16786:16;;16503:305;;;;:::o;16814:191::-;16854:4;16874:20;16892:1;16874:20;:::i;:::-;16869:25;;16908:20;16926:1;16908:20;:::i;:::-;16903:25;;16947:1;16944;16941:8;16938:34;;;16952:18;;:::i;:::-;16938:34;16997:1;16994;16990:9;16982:17;;16814:191;;;;:::o;17011:96::-;17048:7;17077:24;17095:5;17077:24;:::i;:::-;17066:35;;17011:96;;;:::o;17113:90::-;17147:7;17190:5;17183:13;17176:21;17165:32;;17113:90;;;:::o;17209:126::-;17246:7;17286:42;17279:5;17275:54;17264:65;;17209:126;;;:::o;17341:77::-;17378:7;17407:5;17396:16;;17341:77;;;:::o;17424:86::-;17459:7;17499:4;17492:5;17488:16;17477:27;;17424:86;;;:::o;17516:154::-;17600:6;17595:3;17590;17577:30;17662:1;17653:6;17648:3;17644:16;17637:27;17516:154;;;:::o;17676:307::-;17744:1;17754:113;17768:6;17765:1;17762:13;17754:113;;;17853:1;17848:3;17844:11;17838:18;17834:1;17829:3;17825:11;17818:39;17790:2;17787:1;17783:10;17778:15;;17754:113;;;17885:6;17882:1;17879:13;17876:101;;;17965:1;17956:6;17951:3;17947:16;17940:27;17876:101;17725:258;17676:307;;;:::o;17989:320::-;18033:6;18070:1;18064:4;18060:12;18050:22;;18117:1;18111:4;18107:12;18138:18;18128:81;;18194:4;18186:6;18182:17;18172:27;;18128:81;18256:2;18248:6;18245:14;18225:18;18222:38;18219:84;;;18275:18;;:::i;:::-;18219:84;18040:269;17989:320;;;:::o;18315:281::-;18398:27;18420:4;18398:27;:::i;:::-;18390:6;18386:40;18528:6;18516:10;18513:22;18492:18;18480:10;18477:34;18474:62;18471:88;;;18539:18;;:::i;:::-;18471:88;18579:10;18575:2;18568:22;18358:238;18315:281;;:::o;18602:180::-;18650:77;18647:1;18640:88;18747:4;18744:1;18737:15;18771:4;18768:1;18761:15;18788:180;18836:77;18833:1;18826:88;18933:4;18930:1;18923:15;18957:4;18954:1;18947:15;18974:180;19022:77;19019:1;19012:88;19119:4;19116:1;19109:15;19143:4;19140:1;19133:15;19160:117;19269:1;19266;19259:12;19283:117;19392:1;19389;19382:12;19406:117;19515:1;19512;19505:12;19529:117;19638:1;19635;19628:12;19652:102;19693:6;19744:2;19740:7;19735:2;19728:5;19724:14;19720:28;19710:38;;19652:102;;;:::o;19760:222::-;19900:34;19896:1;19888:6;19884:14;19877:58;19969:5;19964:2;19956:6;19952:15;19945:30;19760:222;:::o;19988:221::-;20128:34;20124:1;20116:6;20112:14;20105:58;20197:4;20192:2;20184:6;20180:15;20173:29;19988:221;:::o;20215:::-;20355:34;20351:1;20343:6;20339:14;20332:58;20424:4;20419:2;20411:6;20407:15;20400:29;20215:221;:::o;20442:225::-;20582:34;20578:1;20570:6;20566:14;20559:58;20651:8;20646:2;20638:6;20634:15;20627:33;20442:225;:::o;20673:227::-;20813:34;20809:1;20801:6;20797:14;20790:58;20882:10;20877:2;20869:6;20865:15;20858:35;20673:227;:::o;20906:223::-;21046:34;21042:1;21034:6;21030:14;21023:58;21115:6;21110:2;21102:6;21098:15;21091:31;20906:223;:::o;21135:220::-;21275:34;21271:1;21263:6;21259:14;21252:58;21344:3;21339:2;21331:6;21327:15;21320:28;21135:220;:::o;21361:224::-;21501:34;21497:1;21489:6;21485:14;21478:58;21570:7;21565:2;21557:6;21553:15;21546:32;21361:224;:::o;21591:223::-;21731:34;21727:1;21719:6;21715:14;21708:58;21800:6;21795:2;21787:6;21783:15;21776:31;21591:223;:::o;21820:224::-;21960:34;21956:1;21948:6;21944:14;21937:58;22029:7;22024:2;22016:6;22012:15;22005:32;21820:224;:::o;22050:181::-;22190:33;22186:1;22178:6;22174:14;22167:57;22050:181;:::o;22237:172::-;22377:24;22373:1;22365:6;22361:14;22354:48;22237:172;:::o;22415:122::-;22488:24;22506:5;22488:24;:::i;:::-;22481:5;22478:35;22468:63;;22527:1;22524;22517:12;22468:63;22415:122;:::o;22543:::-;22616:24;22634:5;22616:24;:::i;:::-;22609:5;22606:35;22596:63;;22655:1;22652;22645:12;22596:63;22543:122;:::o",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\nimport \"./openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"./openzeppelin-contracts/contracts/utils/Context.sol\";\n//import \"./stringUtils.sol\";\n\n/**\n * @title SimpleToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `ERC20` functions.\n */\ncontract xUPC is Context, ERC20, ERC20Burnable {\n\n\n    uint rehash = 3;\n    address private owner;\n    struct Reward {\n        uint256  amount;\n        string  winningHash;\n    }\n    \n    Reward[] public rewards;\n    /**\n     * @dev Constructor that gives _msgSender() all of existing tokens.\n     */\n    constructor () ERC20(\"UPC Matrix\", \"XUPC\") public{\n        _mint(_msgSender(), 10000 * (10 ** uint256(decimals())));\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner\n    {\n        require(\n            msg.sender == owner,\n            \"Sender not authorized.\"\n        );\n        // Do not forget the \"_;\"! It will\n        // be replaced by the actual function\n        // body when the modifier is used.\n        _;\n    }\n\n    \n    function addReward(uint256 amount, string memory winningHash) public payable onlyOwner {\n        Reward memory newRewreward;\n        newRewreward.amount = amount;\n        newRewreward.winningHash = winningHash;\n        rewards.push(newRewreward);\n    }\n    \n    function clearRewards() public  onlyOwner{\n        delete rewards;\n    }\n    \n\n    function mine () public {\n                _mint(msg.sender, 1 * (10 ** 16));\n                _mint(address(this), 1 * (10 ** 18));\n    }\n    \n}\n",
  "sourcePath": "/home/tenten/Projects/upcgold.io/src/contracts/xUPC.sol",
  "ast": {
    "absolutePath": "/home/tenten/Projects/upcgold.io/src/contracts/xUPC.sol",
    "exportedSymbols": {
      "Context": [
        23299
      ],
      "ERC20": [
        17487
      ],
      "ERC20Burnable": [
        17627
      ],
      "IERC20": [
        17565
      ],
      "IERC20Metadata": [
        19059
      ],
      "xUPC": [
        27438
      ]
    },
    "id": 27439,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 27303,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:190"
      },
      {
        "absolutePath": "/home/tenten/Projects/upcgold.io/src/contracts/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "file": "./openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "id": 27304,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 27439,
        "sourceUnit": 17488,
        "src": "57:66:190",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/tenten/Projects/upcgold.io/src/contracts/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "file": "./openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "id": 27305,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 27439,
        "sourceUnit": 17628,
        "src": "124:85:190",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/tenten/Projects/upcgold.io/src/contracts/openzeppelin-contracts/contracts/utils/Context.sol",
        "file": "./openzeppelin-contracts/contracts/utils/Context.sol",
        "id": 27306,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 27439,
        "sourceUnit": 23300,
        "src": "210:62:190",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 27308,
              "name": "Context",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 23299,
              "src": "551:7:190"
            },
            "id": 27309,
            "nodeType": "InheritanceSpecifier",
            "src": "551:7:190"
          },
          {
            "baseName": {
              "id": 27310,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17487,
              "src": "560:5:190"
            },
            "id": 27311,
            "nodeType": "InheritanceSpecifier",
            "src": "560:5:190"
          },
          {
            "baseName": {
              "id": 27312,
              "name": "ERC20Burnable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17627,
              "src": "567:13:190"
            },
            "id": 27313,
            "nodeType": "InheritanceSpecifier",
            "src": "567:13:190"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 27307,
          "nodeType": "StructuredDocumentation",
          "src": "304:229:190",
          "text": " @title SimpleToken\n @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n Note they can later distribute these tokens as they wish using `transfer` and other\n `ERC20` functions."
        },
        "fullyImplemented": true,
        "id": 27438,
        "linearizedBaseContracts": [
          27438,
          17627,
          17487,
          19059,
          17565,
          23299
        ],
        "name": "xUPC",
        "nameLocation": "543:4:190",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 27316,
            "mutability": "mutable",
            "name": "rehash",
            "nameLocation": "594:6:190",
            "nodeType": "VariableDeclaration",
            "scope": 27438,
            "src": "589:15:190",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 27314,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "589:4:190",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "33",
              "id": 27315,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "603:1:190",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_3_by_1",
                "typeString": "int_const 3"
              },
              "value": "3"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 27318,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "626:5:190",
            "nodeType": "VariableDeclaration",
            "scope": 27438,
            "src": "610:21:190",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 27317,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "610:7:190",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "canonicalName": "xUPC.Reward",
            "id": 27323,
            "members": [
              {
                "constant": false,
                "id": 27320,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "670:6:190",
                "nodeType": "VariableDeclaration",
                "scope": 27323,
                "src": "661:15:190",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 27319,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "661:7:190",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 27322,
                "mutability": "mutable",
                "name": "winningHash",
                "nameLocation": "694:11:190",
                "nodeType": "VariableDeclaration",
                "scope": 27323,
                "src": "686:19:190",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 27321,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "686:6:190",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Reward",
            "nameLocation": "644:6:190",
            "nodeType": "StructDefinition",
            "scope": 27438,
            "src": "637:75:190",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "f301af42",
            "id": 27327,
            "mutability": "mutable",
            "name": "rewards",
            "nameLocation": "738:7:190",
            "nodeType": "VariableDeclaration",
            "scope": 27438,
            "src": "722:23:190",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Reward_$27323_storage_$dyn_storage",
              "typeString": "struct xUPC.Reward[]"
            },
            "typeName": {
              "baseType": {
                "id": 27325,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 27324,
                  "name": "Reward",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 27323,
                  "src": "722:6:190"
                },
                "referencedDeclaration": 27323,
                "src": "722:6:190",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Reward_$27323_storage_ptr",
                  "typeString": "struct xUPC.Reward"
                }
              },
              "id": 27326,
              "nodeType": "ArrayTypeName",
              "src": "722:8:190",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Reward_$27323_storage_$dyn_storage_ptr",
                "typeString": "struct xUPC.Reward[]"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 27355,
              "nodeType": "Block",
              "src": "888:101:190",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 27336,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 23289,
                          "src": "904:10:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 27337,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "904:12:190",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 27347,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130303030",
                          "id": 27338,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "918:5:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10000_by_1",
                            "typeString": "int_const 10000"
                          },
                          "value": "10000"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 27345,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 27339,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "927:2:190",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 27342,
                                      "name": "decimals",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 17016,
                                      "src": "941:8:190",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
                                        "typeString": "function () view returns (uint8)"
                                      }
                                    },
                                    "id": 27343,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "941:10:190",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  ],
                                  "id": 27341,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "933:7:190",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  },
                                  "typeName": {
                                    "id": 27340,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "933:7:190",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 27344,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "933:19:190",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "927:25:190",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 27346,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "926:27:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "918:35:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 27335,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17347,
                      "src": "898:5:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 27348,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "898:56:190",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27349,
                  "nodeType": "ExpressionStatement",
                  "src": "898:56:190"
                },
                {
                  "expression": {
                    "id": 27353,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 27350,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27318,
                      "src": "964:5:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 27351,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "972:3:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 27352,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "972:10:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "964:18:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 27354,
                  "nodeType": "ExpressionStatement",
                  "src": "964:18:190"
                }
              ]
            },
            "documentation": {
              "id": 27328,
              "nodeType": "StructuredDocumentation",
              "src": "751:83:190",
              "text": " @dev Constructor that gives _msgSender() all of existing tokens."
            },
            "id": 27356,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "555043204d6174726978",
                    "id": 27331,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "860:12:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_58b604afa1641aa43d4d79b97f7c103da31d2716cd23de87662b44b7f340272b",
                      "typeString": "literal_string \"UPC Matrix\""
                    },
                    "value": "UPC Matrix"
                  },
                  {
                    "hexValue": "58555043",
                    "id": 27332,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "874:6:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_93d901d7d02ef1eb220f3ab2f90941b335bb4dc7c3f45927668e78dd52966ac5",
                      "typeString": "literal_string \"XUPC\""
                    },
                    "value": "XUPC"
                  }
                ],
                "id": 27333,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 27330,
                  "name": "ERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 17487,
                  "src": "854:5:190"
                },
                "nodeType": "ModifierInvocation",
                "src": "854:27:190"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 27329,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "851:2:190"
            },
            "returnParameters": {
              "id": 27334,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "888:0:190"
            },
            "scope": 27438,
            "src": "839:150:190",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 27367,
              "nodeType": "Block",
              "src": "1022:248:190",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 27362,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 27359,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "1053:3:190",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 27360,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1053:10:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 27361,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 27318,
                          "src": "1067:5:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1053:19:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "53656e646572206e6f7420617574686f72697a65642e",
                        "id": 27363,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1086:24:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fecfa93da3bfbc5d9ecf62a2ecd3bca847c5dad14f588ad8fef4719729dd5f22",
                          "typeString": "literal_string \"Sender not authorized.\""
                        },
                        "value": "Sender not authorized."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fecfa93da3bfbc5d9ecf62a2ecd3bca847c5dad14f588ad8fef4719729dd5f22",
                          "typeString": "literal_string \"Sender not authorized.\""
                        }
                      ],
                      "id": 27358,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1032:7:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 27364,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1032:88:190",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27365,
                  "nodeType": "ExpressionStatement",
                  "src": "1032:88:190"
                },
                {
                  "id": 27366,
                  "nodeType": "PlaceholderStatement",
                  "src": "1262:1:190"
                }
              ]
            },
            "id": 27368,
            "name": "onlyOwner",
            "nameLocation": "1008:9:190",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 27357,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1022:0:190"
            },
            "src": "999:271:190",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 27399,
              "nodeType": "Block",
              "src": "1368:165:190",
              "statements": [
                {
                  "assignments": [
                    27379
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 27379,
                      "mutability": "mutable",
                      "name": "newRewreward",
                      "nameLocation": "1392:12:190",
                      "nodeType": "VariableDeclaration",
                      "scope": 27399,
                      "src": "1378:26:190",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Reward_$27323_memory_ptr",
                        "typeString": "struct xUPC.Reward"
                      },
                      "typeName": {
                        "id": 27378,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 27377,
                          "name": "Reward",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 27323,
                          "src": "1378:6:190"
                        },
                        "referencedDeclaration": 27323,
                        "src": "1378:6:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Reward_$27323_storage_ptr",
                          "typeString": "struct xUPC.Reward"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 27380,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1378:26:190"
                },
                {
                  "expression": {
                    "id": 27385,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 27381,
                        "name": "newRewreward",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27379,
                        "src": "1414:12:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Reward_$27323_memory_ptr",
                          "typeString": "struct xUPC.Reward memory"
                        }
                      },
                      "id": 27383,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "amount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 27320,
                      "src": "1414:19:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 27384,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27370,
                      "src": "1436:6:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1414:28:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 27386,
                  "nodeType": "ExpressionStatement",
                  "src": "1414:28:190"
                },
                {
                  "expression": {
                    "id": 27391,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 27387,
                        "name": "newRewreward",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27379,
                        "src": "1452:12:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Reward_$27323_memory_ptr",
                          "typeString": "struct xUPC.Reward memory"
                        }
                      },
                      "id": 27389,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "winningHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 27322,
                      "src": "1452:24:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 27390,
                      "name": "winningHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27372,
                      "src": "1479:11:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1452:38:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 27392,
                  "nodeType": "ExpressionStatement",
                  "src": "1452:38:190"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 27396,
                        "name": "newRewreward",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27379,
                        "src": "1513:12:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Reward_$27323_memory_ptr",
                          "typeString": "struct xUPC.Reward memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_Reward_$27323_memory_ptr",
                          "typeString": "struct xUPC.Reward memory"
                        }
                      ],
                      "expression": {
                        "id": 27393,
                        "name": "rewards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27327,
                        "src": "1500:7:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Reward_$27323_storage_$dyn_storage",
                          "typeString": "struct xUPC.Reward storage ref[] storage ref"
                        }
                      },
                      "id": 27395,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "1500:12:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Reward_$27323_storage_$dyn_storage_ptr_$_t_struct$_Reward_$27323_storage_$returns$__$bound_to$_t_array$_t_struct$_Reward_$27323_storage_$dyn_storage_ptr_$",
                        "typeString": "function (struct xUPC.Reward storage ref[] storage pointer,struct xUPC.Reward storage ref)"
                      }
                    },
                    "id": 27397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1500:26:190",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27398,
                  "nodeType": "ExpressionStatement",
                  "src": "1500:26:190"
                }
              ]
            },
            "functionSelector": "7d6aeb9d",
            "id": 27400,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 27375,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 27374,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 27368,
                  "src": "1358:9:190"
                },
                "nodeType": "ModifierInvocation",
                "src": "1358:9:190"
              }
            ],
            "name": "addReward",
            "nameLocation": "1290:9:190",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 27373,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27370,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1308:6:190",
                  "nodeType": "VariableDeclaration",
                  "scope": 27400,
                  "src": "1300:14:190",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27369,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1300:7:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27372,
                  "mutability": "mutable",
                  "name": "winningHash",
                  "nameLocation": "1330:11:190",
                  "nodeType": "VariableDeclaration",
                  "scope": 27400,
                  "src": "1316:25:190",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 27371,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1316:6:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1299:43:190"
            },
            "returnParameters": {
              "id": 27376,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1368:0:190"
            },
            "scope": 27438,
            "src": "1281:252:190",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 27408,
              "nodeType": "Block",
              "src": "1584:31:190",
              "statements": [
                {
                  "expression": {
                    "id": 27406,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "1594:14:190",
                    "subExpression": {
                      "id": 27405,
                      "name": "rewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27327,
                      "src": "1601:7:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Reward_$27323_storage_$dyn_storage",
                        "typeString": "struct xUPC.Reward storage ref[] storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27407,
                  "nodeType": "ExpressionStatement",
                  "src": "1594:14:190"
                }
              ]
            },
            "functionSelector": "e22223d5",
            "id": 27409,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 27403,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 27402,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 27368,
                  "src": "1575:9:190"
                },
                "nodeType": "ModifierInvocation",
                "src": "1575:9:190"
              }
            ],
            "name": "clearRewards",
            "nameLocation": "1552:12:190",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 27401,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1564:2:190"
            },
            "returnParameters": {
              "id": 27404,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1584:0:190"
            },
            "scope": 27438,
            "src": "1543:72:190",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 27436,
              "nodeType": "Block",
              "src": "1650:112:190",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 27413,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "1674:3:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 27414,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1674:10:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_10000000000000000_by_1",
                          "typeString": "int_const 10000000000000000"
                        },
                        "id": 27420,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "31",
                          "id": 27415,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1686:1:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_10000000000000000_by_1",
                                "typeString": "int_const 10000000000000000"
                              },
                              "id": 27418,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 27416,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1691:2:190",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "3136",
                                "id": 27417,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1697:2:190",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_16_by_1",
                                  "typeString": "int_const 16"
                                },
                                "value": "16"
                              },
                              "src": "1691:8:190",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10000000000000000_by_1",
                                "typeString": "int_const 10000000000000000"
                              }
                            }
                          ],
                          "id": 27419,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1690:10:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10000000000000000_by_1",
                            "typeString": "int_const 10000000000000000"
                          }
                        },
                        "src": "1686:14:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10000000000000000_by_1",
                          "typeString": "int_const 10000000000000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_10000000000000000_by_1",
                          "typeString": "int_const 10000000000000000"
                        }
                      ],
                      "id": 27412,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17347,
                      "src": "1668:5:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 27421,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1668:33:190",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27422,
                  "nodeType": "ExpressionStatement",
                  "src": "1668:33:190"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 27426,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967268,
                            "src": "1733:4:190",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_xUPC_$27438",
                              "typeString": "contract xUPC"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_xUPC_$27438",
                              "typeString": "contract xUPC"
                            }
                          ],
                          "id": 27425,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1725:7:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 27424,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1725:7:190",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 27427,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1725:13:190",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        },
                        "id": 27433,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "31",
                          "id": 27428,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1740:1:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              },
                              "id": 27431,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 27429,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1745:2:190",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "3138",
                                "id": 27430,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1751:2:190",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_18_by_1",
                                  "typeString": "int_const 18"
                                },
                                "value": "18"
                              },
                              "src": "1745:8:190",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              }
                            }
                          ],
                          "id": 27432,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1744:10:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          }
                        },
                        "src": "1740:14:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        }
                      ],
                      "id": 27423,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17347,
                      "src": "1719:5:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 27434,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1719:36:190",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27435,
                  "nodeType": "ExpressionStatement",
                  "src": "1719:36:190"
                }
              ]
            },
            "functionSelector": "99f4b251",
            "id": 27437,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mine",
            "nameLocation": "1635:4:190",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 27410,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1640:2:190"
            },
            "returnParameters": {
              "id": 27411,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1650:0:190"
            },
            "scope": 27438,
            "src": "1626:136:190",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 27439,
        "src": "534:1235:190",
        "usedErrors": []
      }
    ],
    "src": "32:1738:190"
  },
  "legacyAST": {
    "absolutePath": "/home/tenten/Projects/upcgold.io/src/contracts/xUPC.sol",
    "exportedSymbols": {
      "Context": [
        23299
      ],
      "ERC20": [
        17487
      ],
      "ERC20Burnable": [
        17627
      ],
      "IERC20": [
        17565
      ],
      "IERC20Metadata": [
        19059
      ],
      "xUPC": [
        27438
      ]
    },
    "id": 27439,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 27303,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:190"
      },
      {
        "absolutePath": "/home/tenten/Projects/upcgold.io/src/contracts/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "file": "./openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "id": 27304,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 27439,
        "sourceUnit": 17488,
        "src": "57:66:190",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/tenten/Projects/upcgold.io/src/contracts/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "file": "./openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "id": 27305,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 27439,
        "sourceUnit": 17628,
        "src": "124:85:190",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/tenten/Projects/upcgold.io/src/contracts/openzeppelin-contracts/contracts/utils/Context.sol",
        "file": "./openzeppelin-contracts/contracts/utils/Context.sol",
        "id": 27306,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 27439,
        "sourceUnit": 23300,
        "src": "210:62:190",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 27308,
              "name": "Context",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 23299,
              "src": "551:7:190"
            },
            "id": 27309,
            "nodeType": "InheritanceSpecifier",
            "src": "551:7:190"
          },
          {
            "baseName": {
              "id": 27310,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17487,
              "src": "560:5:190"
            },
            "id": 27311,
            "nodeType": "InheritanceSpecifier",
            "src": "560:5:190"
          },
          {
            "baseName": {
              "id": 27312,
              "name": "ERC20Burnable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17627,
              "src": "567:13:190"
            },
            "id": 27313,
            "nodeType": "InheritanceSpecifier",
            "src": "567:13:190"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 27307,
          "nodeType": "StructuredDocumentation",
          "src": "304:229:190",
          "text": " @title SimpleToken\n @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n Note they can later distribute these tokens as they wish using `transfer` and other\n `ERC20` functions."
        },
        "fullyImplemented": true,
        "id": 27438,
        "linearizedBaseContracts": [
          27438,
          17627,
          17487,
          19059,
          17565,
          23299
        ],
        "name": "xUPC",
        "nameLocation": "543:4:190",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 27316,
            "mutability": "mutable",
            "name": "rehash",
            "nameLocation": "594:6:190",
            "nodeType": "VariableDeclaration",
            "scope": 27438,
            "src": "589:15:190",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 27314,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "589:4:190",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "33",
              "id": 27315,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "603:1:190",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_3_by_1",
                "typeString": "int_const 3"
              },
              "value": "3"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 27318,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "626:5:190",
            "nodeType": "VariableDeclaration",
            "scope": 27438,
            "src": "610:21:190",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 27317,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "610:7:190",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "canonicalName": "xUPC.Reward",
            "id": 27323,
            "members": [
              {
                "constant": false,
                "id": 27320,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "670:6:190",
                "nodeType": "VariableDeclaration",
                "scope": 27323,
                "src": "661:15:190",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 27319,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "661:7:190",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 27322,
                "mutability": "mutable",
                "name": "winningHash",
                "nameLocation": "694:11:190",
                "nodeType": "VariableDeclaration",
                "scope": 27323,
                "src": "686:19:190",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 27321,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "686:6:190",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Reward",
            "nameLocation": "644:6:190",
            "nodeType": "StructDefinition",
            "scope": 27438,
            "src": "637:75:190",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "f301af42",
            "id": 27327,
            "mutability": "mutable",
            "name": "rewards",
            "nameLocation": "738:7:190",
            "nodeType": "VariableDeclaration",
            "scope": 27438,
            "src": "722:23:190",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Reward_$27323_storage_$dyn_storage",
              "typeString": "struct xUPC.Reward[]"
            },
            "typeName": {
              "baseType": {
                "id": 27325,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 27324,
                  "name": "Reward",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 27323,
                  "src": "722:6:190"
                },
                "referencedDeclaration": 27323,
                "src": "722:6:190",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Reward_$27323_storage_ptr",
                  "typeString": "struct xUPC.Reward"
                }
              },
              "id": 27326,
              "nodeType": "ArrayTypeName",
              "src": "722:8:190",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Reward_$27323_storage_$dyn_storage_ptr",
                "typeString": "struct xUPC.Reward[]"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 27355,
              "nodeType": "Block",
              "src": "888:101:190",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 27336,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 23289,
                          "src": "904:10:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 27337,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "904:12:190",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 27347,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130303030",
                          "id": 27338,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "918:5:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10000_by_1",
                            "typeString": "int_const 10000"
                          },
                          "value": "10000"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 27345,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 27339,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "927:2:190",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 27342,
                                      "name": "decimals",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 17016,
                                      "src": "941:8:190",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
                                        "typeString": "function () view returns (uint8)"
                                      }
                                    },
                                    "id": 27343,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "941:10:190",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  ],
                                  "id": 27341,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "933:7:190",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  },
                                  "typeName": {
                                    "id": 27340,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "933:7:190",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 27344,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "933:19:190",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "927:25:190",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 27346,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "926:27:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "918:35:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 27335,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17347,
                      "src": "898:5:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 27348,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "898:56:190",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27349,
                  "nodeType": "ExpressionStatement",
                  "src": "898:56:190"
                },
                {
                  "expression": {
                    "id": 27353,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 27350,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27318,
                      "src": "964:5:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 27351,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "972:3:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 27352,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "972:10:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "964:18:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 27354,
                  "nodeType": "ExpressionStatement",
                  "src": "964:18:190"
                }
              ]
            },
            "documentation": {
              "id": 27328,
              "nodeType": "StructuredDocumentation",
              "src": "751:83:190",
              "text": " @dev Constructor that gives _msgSender() all of existing tokens."
            },
            "id": 27356,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "555043204d6174726978",
                    "id": 27331,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "860:12:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_58b604afa1641aa43d4d79b97f7c103da31d2716cd23de87662b44b7f340272b",
                      "typeString": "literal_string \"UPC Matrix\""
                    },
                    "value": "UPC Matrix"
                  },
                  {
                    "hexValue": "58555043",
                    "id": 27332,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "874:6:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_93d901d7d02ef1eb220f3ab2f90941b335bb4dc7c3f45927668e78dd52966ac5",
                      "typeString": "literal_string \"XUPC\""
                    },
                    "value": "XUPC"
                  }
                ],
                "id": 27333,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 27330,
                  "name": "ERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 17487,
                  "src": "854:5:190"
                },
                "nodeType": "ModifierInvocation",
                "src": "854:27:190"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 27329,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "851:2:190"
            },
            "returnParameters": {
              "id": 27334,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "888:0:190"
            },
            "scope": 27438,
            "src": "839:150:190",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 27367,
              "nodeType": "Block",
              "src": "1022:248:190",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 27362,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 27359,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "1053:3:190",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 27360,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1053:10:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 27361,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 27318,
                          "src": "1067:5:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1053:19:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "53656e646572206e6f7420617574686f72697a65642e",
                        "id": 27363,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1086:24:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fecfa93da3bfbc5d9ecf62a2ecd3bca847c5dad14f588ad8fef4719729dd5f22",
                          "typeString": "literal_string \"Sender not authorized.\""
                        },
                        "value": "Sender not authorized."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fecfa93da3bfbc5d9ecf62a2ecd3bca847c5dad14f588ad8fef4719729dd5f22",
                          "typeString": "literal_string \"Sender not authorized.\""
                        }
                      ],
                      "id": 27358,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1032:7:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 27364,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1032:88:190",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27365,
                  "nodeType": "ExpressionStatement",
                  "src": "1032:88:190"
                },
                {
                  "id": 27366,
                  "nodeType": "PlaceholderStatement",
                  "src": "1262:1:190"
                }
              ]
            },
            "id": 27368,
            "name": "onlyOwner",
            "nameLocation": "1008:9:190",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 27357,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1022:0:190"
            },
            "src": "999:271:190",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 27399,
              "nodeType": "Block",
              "src": "1368:165:190",
              "statements": [
                {
                  "assignments": [
                    27379
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 27379,
                      "mutability": "mutable",
                      "name": "newRewreward",
                      "nameLocation": "1392:12:190",
                      "nodeType": "VariableDeclaration",
                      "scope": 27399,
                      "src": "1378:26:190",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Reward_$27323_memory_ptr",
                        "typeString": "struct xUPC.Reward"
                      },
                      "typeName": {
                        "id": 27378,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 27377,
                          "name": "Reward",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 27323,
                          "src": "1378:6:190"
                        },
                        "referencedDeclaration": 27323,
                        "src": "1378:6:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Reward_$27323_storage_ptr",
                          "typeString": "struct xUPC.Reward"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 27380,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1378:26:190"
                },
                {
                  "expression": {
                    "id": 27385,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 27381,
                        "name": "newRewreward",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27379,
                        "src": "1414:12:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Reward_$27323_memory_ptr",
                          "typeString": "struct xUPC.Reward memory"
                        }
                      },
                      "id": 27383,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "amount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 27320,
                      "src": "1414:19:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 27384,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27370,
                      "src": "1436:6:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1414:28:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 27386,
                  "nodeType": "ExpressionStatement",
                  "src": "1414:28:190"
                },
                {
                  "expression": {
                    "id": 27391,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 27387,
                        "name": "newRewreward",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27379,
                        "src": "1452:12:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Reward_$27323_memory_ptr",
                          "typeString": "struct xUPC.Reward memory"
                        }
                      },
                      "id": 27389,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "winningHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 27322,
                      "src": "1452:24:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 27390,
                      "name": "winningHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27372,
                      "src": "1479:11:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1452:38:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 27392,
                  "nodeType": "ExpressionStatement",
                  "src": "1452:38:190"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 27396,
                        "name": "newRewreward",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27379,
                        "src": "1513:12:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Reward_$27323_memory_ptr",
                          "typeString": "struct xUPC.Reward memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_Reward_$27323_memory_ptr",
                          "typeString": "struct xUPC.Reward memory"
                        }
                      ],
                      "expression": {
                        "id": 27393,
                        "name": "rewards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27327,
                        "src": "1500:7:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Reward_$27323_storage_$dyn_storage",
                          "typeString": "struct xUPC.Reward storage ref[] storage ref"
                        }
                      },
                      "id": 27395,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "1500:12:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Reward_$27323_storage_$dyn_storage_ptr_$_t_struct$_Reward_$27323_storage_$returns$__$bound_to$_t_array$_t_struct$_Reward_$27323_storage_$dyn_storage_ptr_$",
                        "typeString": "function (struct xUPC.Reward storage ref[] storage pointer,struct xUPC.Reward storage ref)"
                      }
                    },
                    "id": 27397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1500:26:190",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27398,
                  "nodeType": "ExpressionStatement",
                  "src": "1500:26:190"
                }
              ]
            },
            "functionSelector": "7d6aeb9d",
            "id": 27400,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 27375,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 27374,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 27368,
                  "src": "1358:9:190"
                },
                "nodeType": "ModifierInvocation",
                "src": "1358:9:190"
              }
            ],
            "name": "addReward",
            "nameLocation": "1290:9:190",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 27373,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27370,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1308:6:190",
                  "nodeType": "VariableDeclaration",
                  "scope": 27400,
                  "src": "1300:14:190",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27369,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1300:7:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27372,
                  "mutability": "mutable",
                  "name": "winningHash",
                  "nameLocation": "1330:11:190",
                  "nodeType": "VariableDeclaration",
                  "scope": 27400,
                  "src": "1316:25:190",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 27371,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1316:6:190",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1299:43:190"
            },
            "returnParameters": {
              "id": 27376,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1368:0:190"
            },
            "scope": 27438,
            "src": "1281:252:190",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 27408,
              "nodeType": "Block",
              "src": "1584:31:190",
              "statements": [
                {
                  "expression": {
                    "id": 27406,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "1594:14:190",
                    "subExpression": {
                      "id": 27405,
                      "name": "rewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27327,
                      "src": "1601:7:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Reward_$27323_storage_$dyn_storage",
                        "typeString": "struct xUPC.Reward storage ref[] storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27407,
                  "nodeType": "ExpressionStatement",
                  "src": "1594:14:190"
                }
              ]
            },
            "functionSelector": "e22223d5",
            "id": 27409,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 27403,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 27402,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 27368,
                  "src": "1575:9:190"
                },
                "nodeType": "ModifierInvocation",
                "src": "1575:9:190"
              }
            ],
            "name": "clearRewards",
            "nameLocation": "1552:12:190",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 27401,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1564:2:190"
            },
            "returnParameters": {
              "id": 27404,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1584:0:190"
            },
            "scope": 27438,
            "src": "1543:72:190",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 27436,
              "nodeType": "Block",
              "src": "1650:112:190",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 27413,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "1674:3:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 27414,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1674:10:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_10000000000000000_by_1",
                          "typeString": "int_const 10000000000000000"
                        },
                        "id": 27420,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "31",
                          "id": 27415,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1686:1:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_10000000000000000_by_1",
                                "typeString": "int_const 10000000000000000"
                              },
                              "id": 27418,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 27416,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1691:2:190",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "3136",
                                "id": 27417,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1697:2:190",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_16_by_1",
                                  "typeString": "int_const 16"
                                },
                                "value": "16"
                              },
                              "src": "1691:8:190",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10000000000000000_by_1",
                                "typeString": "int_const 10000000000000000"
                              }
                            }
                          ],
                          "id": 27419,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1690:10:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10000000000000000_by_1",
                            "typeString": "int_const 10000000000000000"
                          }
                        },
                        "src": "1686:14:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10000000000000000_by_1",
                          "typeString": "int_const 10000000000000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_10000000000000000_by_1",
                          "typeString": "int_const 10000000000000000"
                        }
                      ],
                      "id": 27412,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17347,
                      "src": "1668:5:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 27421,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1668:33:190",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27422,
                  "nodeType": "ExpressionStatement",
                  "src": "1668:33:190"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 27426,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967268,
                            "src": "1733:4:190",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_xUPC_$27438",
                              "typeString": "contract xUPC"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_xUPC_$27438",
                              "typeString": "contract xUPC"
                            }
                          ],
                          "id": 27425,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1725:7:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 27424,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1725:7:190",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 27427,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1725:13:190",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        },
                        "id": 27433,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "31",
                          "id": 27428,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1740:1:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              },
                              "id": 27431,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 27429,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1745:2:190",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "3138",
                                "id": 27430,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1751:2:190",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_18_by_1",
                                  "typeString": "int_const 18"
                                },
                                "value": "18"
                              },
                              "src": "1745:8:190",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              }
                            }
                          ],
                          "id": 27432,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1744:10:190",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          }
                        },
                        "src": "1740:14:190",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        }
                      ],
                      "id": 27423,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17347,
                      "src": "1719:5:190",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 27434,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1719:36:190",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27435,
                  "nodeType": "ExpressionStatement",
                  "src": "1719:36:190"
                }
              ]
            },
            "functionSelector": "99f4b251",
            "id": 27437,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mine",
            "nameLocation": "1635:4:190",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 27410,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1640:2:190"
            },
            "returnParameters": {
              "id": 27411,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1650:0:190"
            },
            "scope": 27438,
            "src": "1626:136:190",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 27439,
        "src": "534:1235:190",
        "usedErrors": []
      }
    ],
    "src": "32:1738:190"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.7+commit.e28d00a7.Emscripten.clang"
  },
  "networks": {
    "100": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        }
      },
      "links": {},
      "address": "0x8ed93B58D6cE957eb471ED97Cb4F74046Eddf30D",
      "transactionHash": "0xfb1014da042a2c60df030ad8563619de933d4a2046560f5c7df14cd3fb7cb0bd"
    },
    "137": {
      "events": {},
      "links": {},
      "address": "0x93062dC36A504F1a3DcB6E9C297D7B5a5A6FBC18",
      "transactionHash": "0xb0698defe177f8d5fa85bbb7586538aadd3677e43c982b11a375bae3fe419f93"
    },
    "250": {
      "events": {},
      "links": {},
      "address": "0x3ddb17d4d400cB602b63Fcdf8211D2Cd92758cCc",
      "transactionHash": "0xb0698defe177f8d5fa85bbb7586538aadd3677e43c982b11a375bae3fe419f93"
    }
  },
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-08-20T14:44:45.331Z",
  "networkType": "ethereum",
  "devdoc": {
    "details": "Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. Note they can later distribute these tokens as they wish using `transfer` and other `ERC20` functions.",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "constructor": {
        "details": "Constructor that gives _msgSender() all of existing tokens."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "title": "SimpleToken",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}
